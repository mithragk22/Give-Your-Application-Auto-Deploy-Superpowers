version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: deploy
          template: basic_fail_1

  install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install_ansible:
    description: Install Ansible & dependencies
    steps:
      - run:
          name: Install ansible dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            pip install awscli --upgrade

  install_nodejs:
   description: Install Node.js 13
   steps:
     - run:
         name: Install Node.js 13
         command: |
           curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
           sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
                        
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/UR4XkrxDxtMZzG2p9Ukh61/migration_<< parameters.Workflow_ID >>)
            echo $SUCCESS            
            if [[ "$SUCCESS" == "success" ]]
            then
              cd ~/project/backend
              pwd
              ls -la
              npm run migrations:revert                       
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test    
      - notify_on_failure  
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end test
          command: |
            cd frontend
            npm install
            npm run test    
      - notify_on_failure  

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical      
      - notify_on_failure      

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force          
            npm audit --audit-level=critical
      - notify_on_failure
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable      
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - notify_on_failure

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["61:5e:4e:1b:de:1e:3e:21:e9:37:62:28:b1:b0:c2:0f"]
      - attach_workspace:
          at: ~/      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - notify_on_failure
  
  run-migrations:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies   
          working_directory: /tmp       
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build           
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            echo "has been done successfully" > ./migrations_dump.txt
            pwd && ls -al
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then    
              echo "has been done successfully"            
              curl https://kvdb.io/UR4XkrxDxtMZzG2p9Ukh61/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "has failed"
              curl --insecure https://kvdb.io/5rTNVEHdZwSn32ApX5E6D5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment      
      - notify_on_failure

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url          
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}" >> frontend/.env            
            cat frontend/.env           
      - run:
          name: Deploy frontend objects
          command: |            
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz ./dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment
      - revert-migrations
      - notify_on_failure 

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:      
      - checkout       
      - add_ssh_keys:
          fingerprints: ["61:5e:4e:1b:de:1e:3e:21:e9:37:62:28:b1:b0:c2:0f"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            sudo apt-get update && sudo apt-get install -y rysync
            ansible --version
            pip install awscli
            aws --version  
      - run:
          name: Package Backend
          command: |
            cd backend
            npm install
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts         
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt                     
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - destroy-environment
      - notify_on_failure
            
workflows:
  default:
    jobs:
      #- build-frontend
      - build-backend
      - deploy-infrastructure:
          requires: [build-backend]
          filters:
            branches:
              only: [develop]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - deploy-backend          
      # - test-frontend:
          #requires: [build-frontend]
     # - test-backend:
          #requires: [build-backend]
      #- scan-backend:
          #requires: [build-backend]
          #context: myContext
      #- scan-frontend:
          #requires: [build-frontend]
      #- deploy-infrastructure:
         # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
             # only: [master]
      #- configure-infrastructure:
          #requires: [deploy-infrastructure]
      #- run-migrations:
          #requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]    

